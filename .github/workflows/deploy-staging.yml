name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.yourdomain.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=./kubeconfig

      - name: Update image tags
        working-directory: ./k8s
        run: |
          # Update backend image
          sed -i "s|image: .*backend.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}|g" backend-deployment.yaml

          # Update frontend image
          sed -i "s|image: .*frontend.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}|g" frontend-deployment.yaml

      - name: Deploy to Kubernetes
        working-directory: ./k8s
        run: |
          export KUBECONFIG=../kubeconfig

          # Apply configurations
          kubectl apply -f namespace.yaml
          kubectl apply -f configmap.yaml
          kubectl apply -f secrets.yaml

          # Deploy services
          kubectl apply -f mongodb-deployment.yaml
          kubectl apply -f backend-deployment.yaml
          kubectl apply -f frontend-deployment.yaml
          kubectl apply -f ingress.yaml
          kubectl apply -f hpa.yaml

          # Wait for rollout
          kubectl rollout status deployment/backend -n voice-agent --timeout=5m
          kubectl rollout status deployment/frontend -n voice-agent --timeout=5m

      - name: Verify deployment
        run: |
          export KUBECONFIG=./kubeconfig
          kubectl get pods -n voice-agent
          kubectl get svc -n voice-agent
          kubectl get ingress -n voice-agent

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30

          # Test backend health endpoint
          curl -f https://staging-api.yourdomain.com/health || exit 1

          # Test frontend
          curl -f https://staging.yourdomain.com || exit 1

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Staging deployment ${{ job.status }}"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
