"""
Script to seed voice prompts into MongoDB.
"""
import asyncio
from app.database import database
from app.models.configuration import VoicePrompt
from app.repositories.configuration_repository import ConfigurationRepository


async def seed_prompts():
    """Seed sample voice prompts into the database."""
    
    print("üå± Starting prompts seeding...")
    
    try:
        # Connect to database
        await database.connect()
        print("‚úÖ Connected to MongoDB")
        
        # Get database instance
        db = database.get_database()
        config_repo = ConfigurationRepository(db)
        
        # Sample prompts for different states and languages
        sample_prompts = [
            # English prompts
            VoicePrompt(
                prompt_id="greeting_english",
                state="greeting",
                language="english",
                text="Hello! Thank you for your interest in education loans. I'm here to help you find the best loan option for your studies abroad. May I know your name?",
                is_active=True,
                version=1
            ),
            VoicePrompt(
                prompt_id="qualification_english",
                state="qualification",
                language="english",
                text="Great! Now, let me ask you a few questions to understand your requirements better. Which country are you planning to study in?",
                is_active=True,
                version=1
            ),
            VoicePrompt(
                prompt_id="eligibility_english",
                state="eligibility_check",
                language="english",
                text="Thank you for providing that information. Based on your details, let me check your eligibility for our education loan programs.",
                is_active=True,
                version=1
            ),
            
            # Hinglish prompts
            VoicePrompt(
                prompt_id="greeting_hinglish",
                state="greeting",
                language="hinglish",
                text="Namaste! Education loan ke liye aapka interest dekhkar bahut khushi hui. Main aapki madad karunga best loan option dhoondhne mein. Aapka naam kya hai?",
                is_active=True,
                version=1
            ),
            VoicePrompt(
                prompt_id="qualification_hinglish",
                state="qualification",
                language="hinglish",
                text="Bahut accha! Ab main aapse kuch sawal poochunga taaki main aapki zarooraton ko samajh sakun. Aap kis country mein padhna chahte hain?",
                is_active=True,
                version=1
            ),
            VoicePrompt(
                prompt_id="eligibility_hinglish",
                state="eligibility_check",
                language="hinglish",
                text="Aapki jaankari dene ke liye dhanyavaad. Aapke details ke basis par, main aapki eligibility check karta hoon hamare education loan programs ke liye.",
                is_active=True,
                version=1
            ),
            
            # Hindi prompts
            VoicePrompt(
                prompt_id="greeting_hindi",
                state="greeting",
                language="hindi",
                text="‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§ã‡§£ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§∞‡•Å‡§ö‡§ø ‡§¶‡•á‡§ñ‡§ï‡§∞ ‡§¨‡§π‡•Å‡§§ ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•Å‡§à‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§ã‡§£ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§¢‡•Ç‡§Ç‡§¢‡§®‡•á ‡§Æ‡•á‡§Ç‡•§ ‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
                is_active=True,
                version=1
            ),
            
            # Telugu prompts
            VoicePrompt(
                prompt_id="greeting_telugu",
                state="greeting",
                language="telugu",
                text="‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç! ‡∞µ‡∞ø‡∞¶‡±ç‡∞Ø‡∞æ ‡∞∞‡±Å‡∞£‡∞Ç‡∞≤‡±ã ‡∞Æ‡±Ä ‡∞Ü‡∞∏‡∞ï‡±ç‡∞§‡∞ø ‡∞ö‡±Ç‡∞∏‡∞ø ‡∞ö‡∞æ‡∞≤‡∞æ ‡∞∏‡∞Ç‡∞§‡±ã‡∞∑‡∞Ç‡∞ó‡∞æ ‡∞â‡∞Ç‡∞¶‡∞ø. ‡∞Æ‡±Ä ‡∞µ‡∞ø‡∞¶‡±á‡∞∂ ‡∞ö‡∞¶‡±Å‡∞µ‡±Å‡∞≤ ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞â‡∞§‡±ç‡∞§‡∞Æ ‡∞∞‡±Å‡∞£ ‡∞é‡∞Ç‡∞™‡∞ø‡∞ï‡∞®‡±Å ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞°‡∞Ç‡∞≤‡±ã ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞®‡±Å. ‡∞Æ‡±Ä ‡∞™‡±á‡∞∞‡±Å ‡∞è‡∞Æ‡∞ø‡∞ü‡∞ø?",
                is_active=True,
                version=1
            ),
            
            # Tamil prompts
            VoicePrompt(
                prompt_id="greeting_tamil",
                state="greeting",
                language="tamil",
                text="‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç! ‡Æï‡Æ≤‡Øç‡Æµ‡Æø‡Æï‡Øç ‡Æï‡Æü‡Æ©‡Æø‡Æ≤‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÜ‡Æ∞‡Øç‡Æµ‡Æ§‡Øç‡Æ§‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ ‡ÆÆ‡Æï‡Æø‡Æ¥‡Øç‡Æö‡Øç‡Æö‡Æø. ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æµ‡ØÜ‡Æ≥‡Æø‡Æ®‡Ææ‡Æü‡Øç‡Æü‡ØÅ‡Æ™‡Øç ‡Æ™‡Æü‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æö‡Æø‡Æ±‡Æ®‡Øç‡Æ§ ‡Æï‡Æü‡Æ©‡Øç ‡Æµ‡Æø‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æ§‡Øç‡Æ§‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡Æ±‡Æø‡ÆØ ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æ§‡Æµ‡ØÅ‡Æµ‡Øá‡Æ©‡Øç. ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç ‡Æé‡Æ©‡Øç‡Æ©?",
                is_active=True,
                version=1
            ),
        ]
        
        print(f"\nüìù Creating {len(sample_prompts)} sample prompts...")
        created_count = 0
        
        for prompt in sample_prompts:
            try:
                # Check if prompt already exists
                existing = await config_repo.get_prompt(prompt.state, prompt.language)
                if existing:
                    print(f"  ‚ö†Ô∏è  Prompt already exists: {prompt.state}/{prompt.language}")
                    continue
                
                await config_repo.create_prompt(prompt)
                print(f"  ‚úÖ Created prompt: {prompt.state}/{prompt.language}")
                created_count += 1
            except Exception as e:
                print(f"  ‚ùå Failed to create prompt {prompt.prompt_id}: {str(e)}")
        
        print(f"\n‚úÖ Prompts seeding completed! Created {created_count} new prompts.")
        
    except Exception as e:
        print(f"\n‚ùå Error seeding prompts: {str(e)}")
        import traceback
        traceback.print_exc()
    finally:
        await database.disconnect()
        print("\nüëã Disconnected from MongoDB")


if __name__ == "__main__":
    print("="*50)
    print("üå± MongoDB Prompts Seeder")
    print("="*50)
    asyncio.run(seed_prompts())
